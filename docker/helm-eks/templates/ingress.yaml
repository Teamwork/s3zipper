{{- range .Values.ingresses }}
{{- $scopeDict := dict "Release" $.Release "Chart" $.Chart "name" .name -}}
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: {{ include "eks.fullname" $scopeDict }}
  labels:
    {{- include "eks.labels" $scopeDict | nindent 4 }}
    {{- include "eks.selectorLabels" $scopeDict | nindent 4 }}
  {{- if or (eq .type "alb") .annotations }}
  annotations:
    {{- if eq .type "alb" }}
    {{- with .albIngress }}
    alb.ingress.kubernetes.io/group.name: {{ include "eks.albGroupName" . }}
    alb.ingress.kubernetes.io/backend-protocol: HTTP
    alb.ingress.kubernetes.io/success-codes: "200"
    alb.ingress.kubernetes.io/target-type: ip
    alb.ingress.kubernetes.io/certificate-arn: {{ .certificateArn }}
    alb.ingress.kubernetes.io/listen-ports: {{ .listenPorts | squote }}
    {{- if .internal }}
    alb.ingress.kubernetes.io/scheme: internal
    {{- else }}
    alb.ingress.kubernetes.io/scheme: internet-facing
    {{- end }}
    {{- if .healthcheck }}
    alb.ingress.kubernetes.io/healthcheck-protocol: HTTP
    {{- if .healthcheck.path }}
    alb.ingress.kubernetes.io/healthcheck-path: {{ .healthcheck.path | quote }}
    {{- end }}
    {{- if .healthcheck.port }}
    alb.ingress.kubernetes.io/healthcheck-port: {{ .healthcheck.port | quote }}
    {{- end }}
    {{- end }}
    {{- end }}
    {{- range $i, $host := .hosts }}
    {{- range $j, $path := .paths }}
    {{- if $path.headerRouting }}
    alb.ingress.kubernetes.io/group.order: "1000"
    {{- $serviceScopeDict := mergeOverwrite $scopeDict (dict "name" $path.service )}}
    {{- $hash := sha256sum (printf "%s-%s-%s" $path.service $i $j) | trunc 16 }}
    alb.ingress.kubernetes.io/actions.{{ printf "s%s" $hash }}: >
      {"type":"forward","forwardConfig":{"targetGroups":[{"serviceName":"{{ include "eks.fullname" $serviceScopeDict }}","servicePort":"{{ $path.port }}"}]}}
    alb.ingress.kubernetes.io/conditions.{{ printf "s%s" $hash }}: >
      [{"field":"http-header","httpHeaderConfig":{"httpHeaderName": "X-Alb-Target", "values":["{{ $path.header | default $path.service }}"]}}]
    {{- end }}
    {{- end }}
    {{- end }}
    {{- end }}
  {{- with .annotations }}
    {{- toYaml . | nindent 4 }}
  {{- end }}
  {{- end }}
spec:
  {{- if eq .type "alb" }}
  ingressClassName: alb
  {{- else if .className }}
  ingressClassName: {{ .className }}
  {{- end }}
  rules:
    {{- range $i, $host := .hosts }}
    - host: {{ $host.host | quote }}
      http:
        paths:
          {{- range $j, $path := .paths }}
          {{- $serviceScopeDict := mergeOverwrite $scopeDict (dict "name" $path.service )}}
          - path: {{ $path.path }}
            pathType: {{ $path.pathType }}
            backend:
            {{- if $path.headerRouting }}
              {{- $hash := sha256sum (printf "%s-%s-%s" $path.service $i $j) | trunc 16 }}
              service:
                name: {{ printf "s%s" $hash | quote }}
                port:
                  name: use-annotation
            {{- else }}
              service:
                {{- if $path.fixedName }}
                name: {{ $path.service }}
                {{- else }}
                name: {{ include "eks.fullname" $serviceScopeDict }}
                {{- end }}
                port:
                  {{- if kindIs "string" $path.port }}
                  name: {{ $path.port }}
                  {{- else }}
                  number: {{ $path.port }}
                  {{- end }}
            {{- end}}
          {{- end }}
    {{- end }}
  {{- if .tls }}
  tls:
    {{- range .tls }}
    - hosts:
        {{- range .hosts }}
        - {{ . | quote }}
        {{- end }}
      secretName: {{ .secretName }}
    {{- end }}
  {{- end }}
{{ end }}
